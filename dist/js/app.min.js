var app=angular.module("sample",[]);angular.module("sample").controller("firstController",["$scope","createChartService",function(a,t){function e(a){var t={},e=[],r=[],n=[];for(var i in a){var l=a[i].utilizationDate,o=a[i],c=0,s=0,u=0;"india"==o.utilizationLocation.toLowerCase()?(c=o.utilizationValue,r.push({date:l,utilization:c})):"us"==o.utilizationLocation.toLowerCase()?(s=o.utilizationValue,e.push({date:l,utilization:s})):"overall"==o.utilizationLocation.toLowerCase()&&(u=o.utilizationValue,n.push({date:l,utilization:u}))}return t.India={label:"India",data:r,lineColor:"rgb(253, 154, 55)",fill:!1},t.US={label:"US",data:e,lineColor:"rgb(90, 172, 239)",fill:!1},t.Overall={label:"Overall",data:n,lineColor:"gray",fill:!1},t}function r(t){var r=t.data.response;r.successObject&&(a.utilizationChartData=e(r.successObject))}function n(t){var e=t.data.response;if(e.successObject){var r=[];for(var n in e.successObject)r.push(e.successObject[n]);a.peopleList=r,a.benchPieChartData=i(a.peopleList);var l=0,o=0;for(var n in r)"Bangalore"==r[n].location||"Noida"==r[n].location?l++:"US"!=r[n].location&&"Santa Clara"!=r[n].location||o++}}function i(a){for(var t=[],t=[{label:"Kannada",count:0},{label:"Tamil",count:0},{label:"Telugu",count:0},{label:"Others",count:0}],e=0;e<a.length;e++)a[e].stateName==s[0]?t[0].count=t[0].count+1:a[e].stateName==s[1]?t[1].count=t[1].count+1:a[e].stateName==s[2]?t[2].count=t[2].count+1:t[3].count=t[3].count+1;return t}function l(a){console.error("ERROR: Failed in XHR : "+a)}function o(){a.loading=!1}var c=this;c.firstChart="Sample Line Chart",c.secondChart="Sample Pie Chart";var s={0:"Kannada",1:"Tamil",2:"Telugu",3:"Others"};!function(){a.loading=!0,t.getChartData().then(r,l).finally(o)}(),function(){a.loading=!0,t.getPieChartData().then(n,l).finally(o)}(),a.chartOptions=[{id:1,name:"Option 1"},{id:2,name:"Option 2"}],a.updateLineChart=function(a){a&&1==a.id?t.getChartData().then(r,l).finally(o):t.getChartDataOption2().then(r,l).finally(o)},a.updatePieChart=function(a){a&&1==a.id?t.getPieChartData().then(n,l).finally(o):t.getPieChartDataOption2().then(n,l).finally(o)}}]);var app=angular.module("sample");angular.module("sample").directive("chart",["chartsService",function(a){function t(t,e,r){var n=this;if(n.max=0,console.log(t),"pie"!=t.chartType)var i={id:t.id,datasetLabel:t.datasetLabel,datalabels:!0,maintainAspectRatio:!1,zoom:{enabled:!1,mode:"xy"},pan:{enabled:!1,mode:"xy"},chart:{height:300,type:t.chartType},responsive:!0,legend:{display:t.legendDisplay,position:"bottom"},title:{display:!1,text:"Chart.js Bar Chart"},scales:{xAxes:[{display:!0,scaleLabel:{display:!0,labelString:t.hScaleLabel,fontColor:"#000",fontSize:16}}],yAxes:[{display:!0,ticks:{beginAtZero:!t.yScaleMin,min:t.yScaleMin,max:t.yScaleMax,callback:function(a,e,r){return n.max<a&&(n.max=a),a+t.yScaleSuffix}},scaleLabel:{display:!0,labelString:t.yScaleLabel,fontColor:"#000",fontSize:16}}]},showTooltips:!1,tooltipTemplate:"<%= value %>",tooltips:{callbacks:{title:function(a,t){return a[0].xLabel+" : "+a[0].yLabel},label:function(a,t){t.datasets[a.datasetIndex].label;return""}}}};else if(t.chartType="pie")var i={id:t.id,datasetLabel:t.datasetLabel,chartData:t.chartData,datalabels:!0,maintainAspectRatio:!1,zoom:{enabled:!1,mode:"xy"},pan:{enabled:!1,mode:"xy"},chart:{height:300,type:t.chartType},responsive:!0,legend:{display:t.legendDisplay,position:"bottom"},title:{display:!1,text:"Chart.js Pie Chart"},showTooltips:!0,tooltipTemplate:"<%= value %>"};t.$watchCollection("chartData",function(e,l){if(e){var o=a.generateChartData(t.chartData,t.hAxisProp,t.yAxisProp,JSON.parse(t.dateType),i),c=o.datasets,s=[];for(var u in c)s=s.concat(c[u].data);n.max=s[0];for(var h in s)n.max<s[h]&&(n.max=s[h]);var d=a.drawChart(r.id,o,i);if(d&&"Profitability GM YTD"===d.options.datasetLabel){var p=d.chart.ctx;p.canvas.onclick=function(a){var e=d.getElementsAtEvent(a);console.log(e),t.$emit("datapointClick",e)}}if(d&&"BenchSkillBarChart"===d.options.datasetLabel){var p=d.chart.ctx;p.canvas.onclick=function(a){var e=d.getElementsAtEvent(a);t.$emit("benchBarChartClick",e)}}if(d&&"BenchSkillPieChart"===d.options.datasetLabel){var p=d.chart.ctx;p.canvas.onclick=function(a){var e=d.getElementsAtEvent(a);t.$emit("benchPieChartClick",e)}}if(d&&"PracticeInputBarChart"===d.options.datasetLabel){var p=d.chart.ctx;p.canvas.onclick=function(a){var e=d.getElementsAtEvent(a);t.$emit("practiceBarChartClick",e)}}console.log(d)}})}function e(){}return{restrict:"E",template:"<canvas></canvas>",replace:!0,link:t,controller:e,scope:{id:"=",chartData:"=?",chartType:"=?",hAxisProp:"=?",yAxisProp:"=?",dateType:"=?",datasetLabel:"=?",legendDisplay:"@",yScaleSuffix:"@",hScaleLabel:"@",yScaleLabel:"@",yScaleMin:"@",yScaleMax:"@"}}}]),function(){"use strict";angular.module("sample");angular.module("sample").directive("firstOne",function(){return{restrict:"EA",bindToController:!0,controller:"firstController",controllerAs:"first",replace:!0,templateUrl:"index.html"}})}(),function(){angular.module("sample").service("chartsService",["$http","$rootScope","$window",function(a,t,e){function r(a){return["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a.getMonth()]+" "+a.getFullYear()}var n=["rgba(0, 234, 221, 0.5)","rgba(232, 140, 209, 0.5)","rgba(174, 140, 232, 0.5)","rgba(0, 169, 19, 0.5)","rgba(137, 204, 0, 0.5)","rgba(204, 176, 0, 0.5)","rgba(206, 105, 23, 0.5)","rgba(255, 99, 132, 0.5)","rgba(54, 162, 235, 0.5)","rgba(136, 255, 0, 0.5)","rgba(142, 48, 160, 0.5)","rgba(0, 222, 220, 0.5)","rgba(255, 206, 86, 0.5)","rgba(75, 192, 192, 0.5)","rgba(0, 234, 221, 0.5)","rgba(153, 102, 255, 0.5)","rgba(139, 126, 255, 0.5)","rgba(142, 48, 160, 0.5)","rgba(191, 6, 6, 0.5)","rgba(153, 102, 255, 0.5)","rgba(255, 206, 86, 0.5)","rgba(65, 196, 255, 0.5)","rgba(137, 204, 0, 0.5)","rgba(0, 169, 19, 0.5)","rgba(255, 159, 64, 0.5)","rgba(142, 48, 160, 0.5)","rgba(255, 206, 86, 0.5)","rgba(0, 222, 220, 0.5)","rgba(137, 204, 0, 0.5)","rgba(174, 140, 232, 0.5)","rgba(0, 169, 19, 0.5)","rgba(137, 204, 0, 0.5)"],i=this;i.charts=[],i.drawChart=function(a,t,e){var r=e.chart&&e.chart.height||300,n=e.chart&&e.chart.width||400,l=e.chart&&e.chart.type||"bar",o=document.getElementById(a).getContext("2d");o.canvas.height=r,o.canvas.width=n;var c=new Chart(o,{type:l,data:t,options:e});return i.charts.push(c),c},i.generateChartData=function(a,t,e,i,l){var o=i||!1,c=l.datasetLabel||"x-axis",s=[],u=[];if(a.constructor!==Array){var h=Object.keys(a);for(var d in h){var p=a[h[d]].data,b=a[h[d]].backgroundColor,g=a[h[d]].fill,f=a[h[d]].lineColor,c=a[h[d]].label,v=[];for(var C in p){var m=p[C][t];m=1==o?r(new Date(m)):m;var y=p[C][e];u.push(m),v.push(y)}var x={label:c,data:v,backgroundColor:b,fill:g,borderColor:f};s.push(x)}}else{var v=[],S=[];for(var d in a){var m=a[d][t];m=1==o?r(new Date(m)):m;var y=a[d][e];a[d].backgroundColor&&S.push(a[d].backgroundColor),null!==m&&u.push(m),v.push(y)}var x={label:c,data:v,backgroundColor:S.length>0?S:n};s.push(x)}var L=u;return{labels:$.unique(L),datasets:s}}}])}(),angular.module("sample").factory("createChartService",["$http",function(a){var t={};return t.getChartData=function(){return a.get("json/data.json")},t.getChartDataOption2=function(){return a.get("json/dataOption2.json")},t.getPieChartData=function(){return a.get("json/dataForPie.json")},t.getPieChartDataOption2=function(){return a.get("json/dataForPieOption2.json")},t}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
