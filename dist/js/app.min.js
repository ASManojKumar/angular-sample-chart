var app=angular.module("sample",[]);angular.module("sample").controller("firstController",["$scope","BenchAPIService",function(a,t){function e(a){var t=a.data,e=t;_.each(e,function(a){r.valueSet=a})}var r=this;!function(){a.loading=!0,t.getBenchEmployees().then(e)}()}]);var app=angular.module("sample");angular.module("sample").directive("chart",["chartsService",function(a){function t(t,e,r){var l=this;if(l.max=0,console.log(t),"pie"!=t.chartType)var n={id:t.id,datasetLabel:t.datasetLabel,datalabels:!0,maintainAspectRatio:!1,zoom:{enabled:!1,mode:"xy"},pan:{enabled:!1,mode:"xy"},chart:{height:300,type:t.chartType},responsive:!0,legend:{display:t.legendDisplay,position:"bottom"},title:{display:!1,text:"Chart.js Bar Chart"},scales:{xAxes:[{display:!0,scaleLabel:{display:!0,labelString:t.hScaleLabel,fontColor:"#000",fontSize:16}}],yAxes:[{display:!0,ticks:{beginAtZero:!t.yScaleMin,min:t.yScaleMin,max:t.yScaleMax,callback:function(a,e,r){return l.max<a&&(l.max=a),a+t.yScaleSuffix}},scaleLabel:{display:!0,labelString:t.yScaleLabel,fontColor:"#000",fontSize:16}}]},showTooltips:!1,tooltipTemplate:"<%= value %>",tooltips:{callbacks:{title:function(a,t){return a[0].xLabel+" : "+a[0].yLabel},label:function(a,t){t.datasets[a.datasetIndex].label;return""}}}};else if(t.chartType="pie")var n={id:t.id,datasetLabel:t.datasetLabel,chartData:t.chartData,datalabels:!0,maintainAspectRatio:!1,zoom:{enabled:!1,mode:"xy"},pan:{enabled:!1,mode:"xy"},chart:{height:300,type:t.chartType},responsive:!0,legend:{display:t.legendDisplay,position:"bottom"},title:{display:!1,text:"Chart.js Pie Chart"},showTooltips:!0,tooltipTemplate:"<%= value %>"};"profitability"===e.context.id&&(n.tooltips={callbacks:{label:function(a,t){return"Click for more details"}}}),t.$watchCollection("chartData",function(e,o){if(e){var i=a.generateChartData(t.chartData,t.hAxisProp,t.yAxisProp,JSON.parse(t.dateType),n),c=i.datasets,s=[];for(var p in c)s=s.concat(c[p].data);l.max=s[0];for(var b in s)l.max<s[b]&&(l.max=s[b]);var h=a.drawChart(r.id,i,n);if(h&&"Profitability GM YTD"===h.options.datasetLabel){var d=h.chart.ctx;d.canvas.onclick=function(a){var e=h.getElementsAtEvent(a);console.log(e),t.$emit("datapointClick",e)}}if(h&&"BenchSkillBarChart"===h.options.datasetLabel){var d=h.chart.ctx;d.canvas.onclick=function(a){var e=h.getElementsAtEvent(a);t.$emit("benchBarChartClick",e)}}if(h&&"BenchSkillPieChart"===h.options.datasetLabel){var d=h.chart.ctx;d.canvas.onclick=function(a){var e=h.getElementsAtEvent(a);t.$emit("benchPieChartClick",e)}}if(h&&"PracticeInputBarChart"===h.options.datasetLabel){var d=h.chart.ctx;d.canvas.onclick=function(a){var e=h.getElementsAtEvent(a);t.$emit("practiceBarChartClick",e)}}console.log(h)}})}function e(){}return{restrict:"E",template:"<canvas></canvas>",replace:!0,link:t,controller:e,scope:{id:"=",chartData:"=?",chartType:"=?",hAxisProp:"=?",yAxisProp:"=?",dateType:"=?",datasetLabel:"=?",legendDisplay:"@",yScaleSuffix:"@",hScaleLabel:"@",yScaleLabel:"@",yScaleMin:"@",yScaleMax:"@"}}}]),function(){"use strict";angular.module("sample");angular.module("sample").directive("firstOne",function(){return{restrict:"EA",bindToController:!0,controller:"firstController",controllerAs:"first",replace:!0,templateUrl:"index.html"}})}(),angular.module("sample").factory("BenchAPIService",["$http",function(a){var t={};return t.getBenchEmployees=function(){return a.get("json/data.json")},t}]),function(){angular.module("sample").service("chartsService",["$http","$rootScope","$window",function(a,t,e){function r(a){return["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a.getMonth()]+" "+a.getFullYear()}var l=["rgba(0, 234, 221, 0.5)","rgba(232, 140, 209, 0.5)","rgba(174, 140, 232, 0.5)","rgba(0, 169, 19, 0.5)","rgba(137, 204, 0, 0.5)","rgba(204, 176, 0, 0.5)","rgba(206, 105, 23, 0.5)","rgba(255, 99, 132, 0.5)","rgba(54, 162, 235, 0.5)","rgba(136, 255, 0, 0.5)","rgba(142, 48, 160, 0.5)","rgba(0, 222, 220, 0.5)","rgba(255, 206, 86, 0.5)","rgba(75, 192, 192, 0.5)","rgba(0, 234, 221, 0.5)","rgba(153, 102, 255, 0.5)","rgba(139, 126, 255, 0.5)","rgba(142, 48, 160, 0.5)","rgba(191, 6, 6, 0.5)","rgba(153, 102, 255, 0.5)","rgba(255, 206, 86, 0.5)","rgba(65, 196, 255, 0.5)","rgba(137, 204, 0, 0.5)","rgba(0, 169, 19, 0.5)","rgba(255, 159, 64, 0.5)","rgba(142, 48, 160, 0.5)","rgba(255, 206, 86, 0.5)","rgba(0, 222, 220, 0.5)","rgba(137, 204, 0, 0.5)","rgba(174, 140, 232, 0.5)","rgba(0, 169, 19, 0.5)","rgba(137, 204, 0, 0.5)"],n=this;n.charts=[],n.drawChart=function(a,t,e){var r=e.chart&&e.chart.height||300,l=e.chart&&e.chart.width||400,o=e.chart&&e.chart.type||"bar",i=document.getElementById(a).getContext("2d");i.canvas.height=r,i.canvas.width=l;var c=new Chart(i,{type:o,data:t,options:e});return n.charts.push(c),c},n.generateChartData=function(a,t,e,n,o){var i=n||!1,c=o.datasetLabel||"x-axis",s=[],p=[];if(a.constructor!==Array){var b=Object.keys(a);for(var h in b){var d=a[b[h]].data,u=a[b[h]].backgroundColor,g=a[b[h]].fill,v=a[b[h]].lineColor,c=a[b[h]].label,f=[];for(var m in d){var y=d[m][t];y=1==i?r(new Date(y)):y;var x=d[m][e];p.push(y),f.push(x)}var C={label:c,data:f,backgroundColor:u,fill:g,borderColor:v};s.push(C)}}else{var f=[],S=[];for(var h in a){var y=a[h][t];y=1==i?r(new Date(y)):y;var x=a[h][e];a[h].backgroundColor&&S.push(a[h].backgroundColor),null!==y&&p.push(y),f.push(x)}var C={label:c,data:f,backgroundColor:S.length>0?S:l};s.push(C)}var k=p;return{labels:$.unique(k),datasets:s}}}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
