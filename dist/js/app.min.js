var app=angular.module("sample",[]);angular.module("sample").controller("firstController",["$scope","createChartService",function(a,t){function e(a){var t={},e=[],r=[],l=[];for(var i in a){var n=a[i].utilizationDate,o=a[i],c=0,s=0,u=0;"india"==o.utilizationLocation.toLowerCase()?(c=o.utilizationValue,r.push({date:n,utilization:c})):"us"==o.utilizationLocation.toLowerCase()?(s=o.utilizationValue,e.push({date:n,utilization:s})):"overall"==o.utilizationLocation.toLowerCase()&&(u=o.utilizationValue,l.push({date:n,utilization:u}))}return t.India={label:"India",data:r,lineColor:"rgb(253, 154, 55)",fill:!1},t.US={label:"US",data:e,lineColor:"rgb(90, 172, 239)",fill:!1},t.Overall={label:"Overall",data:l,lineColor:"gray",fill:!1},t}function r(t){var r=t.data.response;r.successObject&&(a.utilizationChartData=e(r.successObject))}function l(a){console.error("ERROR: Failed in XHR : "+a)}function i(){a.loading=!1}!function(){a.loading=!0,t.getChartData().then(r,l).finally(i)}()}]);var app=angular.module("sample");angular.module("sample").directive("chart",["chartsService",function(a){function t(t,e,r){var l=this;if(l.max=0,console.log(t),"pie"!=t.chartType)var i={id:t.id,datasetLabel:t.datasetLabel,datalabels:!0,maintainAspectRatio:!1,zoom:{enabled:!1,mode:"xy"},pan:{enabled:!1,mode:"xy"},chart:{height:300,type:t.chartType},responsive:!0,legend:{display:t.legendDisplay,position:"bottom"},title:{display:!1,text:"Chart.js Bar Chart"},scales:{xAxes:[{display:!0,scaleLabel:{display:!0,labelString:t.hScaleLabel,fontColor:"#000",fontSize:16}}],yAxes:[{display:!0,ticks:{beginAtZero:!t.yScaleMin,min:t.yScaleMin,max:t.yScaleMax,callback:function(a,e,r){return l.max<a&&(l.max=a),a+t.yScaleSuffix}},scaleLabel:{display:!0,labelString:t.yScaleLabel,fontColor:"#000",fontSize:16}}]},showTooltips:!1,tooltipTemplate:"<%= value %>",tooltips:{callbacks:{title:function(a,t){return a[0].xLabel+" : "+a[0].yLabel},label:function(a,t){t.datasets[a.datasetIndex].label;return""}}}};else if(t.chartType="pie")var i={id:t.id,datasetLabel:t.datasetLabel,chartData:t.chartData,datalabels:!0,maintainAspectRatio:!1,zoom:{enabled:!1,mode:"xy"},pan:{enabled:!1,mode:"xy"},chart:{height:300,type:t.chartType},responsive:!0,legend:{display:t.legendDisplay,position:"bottom"},title:{display:!1,text:"Chart.js Pie Chart"},showTooltips:!0,tooltipTemplate:"<%= value %>"};t.$watchCollection("chartData",function(e,n){if(e){var o=a.generateChartData(t.chartData,t.hAxisProp,t.yAxisProp,JSON.parse(t.dateType),i),c=o.datasets,s=[];for(var u in c)s=s.concat(c[u].data);l.max=s[0];for(var d in s)l.max<s[d]&&(l.max=s[d]);var b=a.drawChart(r.id,o,i);if(b&&"Profitability GM YTD"===b.options.datasetLabel){var h=b.chart.ctx;h.canvas.onclick=function(a){var e=b.getElementsAtEvent(a);console.log(e),t.$emit("datapointClick",e)}}if(b&&"BenchSkillBarChart"===b.options.datasetLabel){var h=b.chart.ctx;h.canvas.onclick=function(a){var e=b.getElementsAtEvent(a);t.$emit("benchBarChartClick",e)}}if(b&&"BenchSkillPieChart"===b.options.datasetLabel){var h=b.chart.ctx;h.canvas.onclick=function(a){var e=b.getElementsAtEvent(a);t.$emit("benchPieChartClick",e)}}if(b&&"PracticeInputBarChart"===b.options.datasetLabel){var h=b.chart.ctx;h.canvas.onclick=function(a){var e=b.getElementsAtEvent(a);t.$emit("practiceBarChartClick",e)}}console.log(b)}})}function e(){}return{restrict:"E",template:"<canvas></canvas>",replace:!0,link:t,controller:e,scope:{id:"=",chartData:"=?",chartType:"=?",hAxisProp:"=?",yAxisProp:"=?",dateType:"=?",datasetLabel:"=?",legendDisplay:"@",yScaleSuffix:"@",hScaleLabel:"@",yScaleLabel:"@",yScaleMin:"@",yScaleMax:"@"}}}]),function(){"use strict";angular.module("sample");angular.module("sample").directive("firstOne",function(){return{restrict:"EA",bindToController:!0,controller:"firstController",controllerAs:"first",replace:!0,templateUrl:"index.html"}})}(),function(){angular.module("sample").service("chartsService",["$http","$rootScope","$window",function(a,t,e){function r(a){return["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][a.getMonth()]+" "+a.getFullYear()}var l=["rgba(0, 234, 221, 0.5)","rgba(232, 140, 209, 0.5)","rgba(174, 140, 232, 0.5)","rgba(0, 169, 19, 0.5)","rgba(137, 204, 0, 0.5)","rgba(204, 176, 0, 0.5)","rgba(206, 105, 23, 0.5)","rgba(255, 99, 132, 0.5)","rgba(54, 162, 235, 0.5)","rgba(136, 255, 0, 0.5)","rgba(142, 48, 160, 0.5)","rgba(0, 222, 220, 0.5)","rgba(255, 206, 86, 0.5)","rgba(75, 192, 192, 0.5)","rgba(0, 234, 221, 0.5)","rgba(153, 102, 255, 0.5)","rgba(139, 126, 255, 0.5)","rgba(142, 48, 160, 0.5)","rgba(191, 6, 6, 0.5)","rgba(153, 102, 255, 0.5)","rgba(255, 206, 86, 0.5)","rgba(65, 196, 255, 0.5)","rgba(137, 204, 0, 0.5)","rgba(0, 169, 19, 0.5)","rgba(255, 159, 64, 0.5)","rgba(142, 48, 160, 0.5)","rgba(255, 206, 86, 0.5)","rgba(0, 222, 220, 0.5)","rgba(137, 204, 0, 0.5)","rgba(174, 140, 232, 0.5)","rgba(0, 169, 19, 0.5)","rgba(137, 204, 0, 0.5)"],i=this;i.charts=[],i.drawChart=function(a,t,e){var r=e.chart&&e.chart.height||300,l=e.chart&&e.chart.width||400,n=e.chart&&e.chart.type||"bar",o=document.getElementById(a).getContext("2d");o.canvas.height=r,o.canvas.width=l;var c=new Chart(o,{type:n,data:t,options:e});return i.charts.push(c),c},i.generateChartData=function(a,t,e,i,n){var o=i||!1,c=n.datasetLabel||"x-axis",s=[],u=[];if(a.constructor!==Array){var d=Object.keys(a);for(var b in d){var h=a[d[b]].data,p=a[d[b]].backgroundColor,g=a[d[b]].fill,v=a[d[b]].lineColor,c=a[d[b]].label,f=[];for(var m in h){var y=h[m][t];y=1==o?r(new Date(y)):y;var C=h[m][e];u.push(y),f.push(C)}var x={label:c,data:f,backgroundColor:p,fill:g,borderColor:v};s.push(x)}}else{var f=[],S=[];for(var b in a){var y=a[b][t];y=1==o?r(new Date(y)):y;var C=a[b][e];a[b].backgroundColor&&S.push(a[b].backgroundColor),null!==y&&u.push(y),f.push(C)}var x={label:c,data:f,backgroundColor:S.length>0?S:l};s.push(x)}var L=u;return{labels:$.unique(L),datasets:s}}}])}(),angular.module("sample").factory("createChartService",["$http",function(a){var t={};return t.getChartData=function(){return a.get("json/data.json")},t}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
